url для правильной работы - в app.js
web_server_url  - локальный веб-сервер
dev_url         - адрес МК, можно для каждого устройства и датчика задать отдельно в переменыых ниже,
				например:
		_entrance_door   = {id:  1, url: <device_url>, ip: "", port: "", state: "opened"}; 


id устройств:
1 - входная дверь
2 - таймер
3 - дверь в комнату 2
4 - кнопка шкафа
5 - дверь шкафа
6 - подставка многогранника

GET запросы к устройствам GET=>
GET запросы от устройств  GET<=

1) жмём "Сбросить" - устанавливаются стартовые значения в модели
	модель - это отображение всех датчиков и устройств в web-сервере, 
	исходя из неё обрабатываются и отправляются запросы


2) жмём "Начать" - стартует процесс:
	2.1) GET=> /entrance_door/close - закрываем дверь
		в ответ получаем JSON вида
		{success: 1, error: 0, state: {id: 1, ..., state: 'closed'}}
	2.2) GET=> /timer/activate/5 - запускаем таймер на 5 секунд
		в ответ получаем JSON вида
		{success: 1, error: 0, state: {id: 1, ..., state: 'active', value: 5, current_value: 5}}
	2.3) ждём событий a)

	a) события таймера:
		a.1) GET<= /current_value/:value - текущее значение таймера, ждём событий a)
		a.2) GET<= /ready - сработал таймер, переходим к 3)


3) сработал таймер
	3.1) GET=> /room2_door/open - открываем дверь в комнату2:
		в ответ получаем JSON вида
		{success: 1, error: 0, state: {id: 3, ..., state: 'opened'}}
	3.2) ждём событий b)

	b) события шкафа:
		b.1) GET<= /locker_button/pushed - нажата кнопка, переходим к 4)


4) нажата кнопка шкафа
	4.1) GET=> /locker_door/open - открываем дверь шкафа
		в ответ получаем JSON вида
		{success: 1, error: 0, state: {id: 5, ..., state: 'opened'}}
	4.2) ждём событий c)

	c) события многогранника
		c.1) GET<= /polyhedron_rack/activated   - подставка активирована, переходим к 5)
		с.2) GET<= /polyhedron_rack/deactivated - подставка деактивирована, ждём событий c)

5) ...